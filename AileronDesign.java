package falconsTools;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;

public class AileronDesign {
	static double M_Aileron , M_RollingDrag , Ixx , Mxx ; 
	static double L_Aileron , D_Rolling ; 
	static double t2 ; 
	static double pi = Math.PI ; 
	static double phi2 ;
	
	static double t , dt = 0.00001 ; 
	static double phi ;
	
	static double Swf , Sv , Sh , Sref , bw = 2.6 , bf = 0.4 , bwf = 3 ; 
	static double yD =  1.5 , density = 1.225 , Vr , CDr  ; 
	
	static double dP_dt , P ;
	
	static double lambda , taperStart , c_root , zeroLiftAoA = -14.2 , velocity = 11 ; 
	
	public static void input () { 
		phi2 = pi / 4 ; 
		t2 = 1.7 ; 
		
		Swf = 1.81 ; 
		Sv = 0.14 ; 
		Sh = 0.38 ; 
		
		CDr = 0.9 ; 
		Ixx = 3 ; 
		
		lambda = 0.62015503876 ; 
		taperStart = 0.3423076923 ; 
		c_root = 0.645 ;
	}
	public static void main ( String args[] ) { 
		input() ; 
		M_Aileron = MomentRequired() ; 
		double M_oneAileron = M_Aileron / 2 ;
		AileronSizing ( M_oneAileron ) ;
		displayValues ( M_Aileron ) ;		
	}
	
	public static void AileronSizing( double M_aileron_required ) { 
		double maxDeflection = 25 ;
		double dx = 0.000001 ;
		double M_aileron = 0 , L_aileron = 0;
		double s = 0.3 ;
		double BO = 0.075 ;
		double bo = ( 1.5 - BO )*1000 ;
		double co =  (lambda * c_root + ( c_root  * ( 1 - lambda ) / (( 1 - taperStart ) * ( bw / 2 ) ) )  * BO - s ) * 1000 ;
		for ( double x = BO; x <= 1.5 ; x += dx ) {
			
			double cw_local = lambda * c_root + ( c_root  * ( 1 - lambda ) / (( 1 - taperStart ) * ( bw / 2 ) ) )  * x ;
			double ca_local =  ( cw_local - s ) ;
			double ca_cw = ca_local / cw_local ; 
			double tao = 1.129*Math.pow(ca_cw,0.4044)-0.1772 ;
			double CL_local_noDeflection = ( 1.52405 * Math.pow(x, 0.193053) - 0.313201 ) * 0.9 ;
			//double CL_local_noDeflection = 0.7 ;
			double local_lift_slope = CL_local_noDeflection / ( -zeroLiftAoA + 5 ) ;
			double CL_local_Deflection = tao * local_lift_slope * maxDeflection ;
			double local_Lift_Deflection = 0.5 * density * velocity * velocity * cw_local * dx * CL_local_Deflection ;
			double local_Moment_Deflection = local_Lift_Deflection * ( 1.500 - x ) ;
			
			L_aileron += local_Lift_Deflection ;
			M_aileron += local_Moment_Deflection ; 
			if ( M_aileron >= M_aileron_required ) 
			{
				double bi = ( 1.5 - x )*1000 ;
				double ci = ca_local * 1000 ; 
				double S_aileron = ( ci + co ) / 2 * ( bo - bi ) / 1000 / 1000 ;
				
				System.out.println ("bi : " + ( bi - 200 )+ " mm") ;	
				System.out.println ( "ci : " + ci  + "mm" ) ;
				System.out.println ("bo : " + ( bo - 200 )  + " mm") ;
				System.out.println("co : " +  co + " mm") ;
				System.out.println("span : " + ( bo - bi ) + " mm") ;
				System.out.println("S_aileron : " + S_aileron + " m^2") ;
				System.out.println("L_aileron : " + L_aileron + " N") ;
				System.out.println("M_aileron : " + M_aileron + " Nm") ;
				System.out.println("aileron Moment arm : " + (M_aileron/L_aileron) + " m") ;
				break ;
			}
		}		
		
	}
		
	
	public static double MomentRequired ( ) { 
		for ( double M_aileron = 1 ; M_aileron <= 40 ; M_aileron += 0.1 ) { 
			double f = 0 ;
			phi =0; P = 0; dP_dt = 0 ; Vr = 0 ; D_Rolling =0; M_RollingDrag = 0; Mxx = 0 ;
			for ( double t = 0 ; t <= t2   ; t += dt ) { 
	
				Vr = P * yD ;
				D_Rolling = 0.5 * density * Vr * Vr * ( Swf + Sv + Sh )* CDr ;
				M_RollingDrag = 2 * 0.5 * density * velocity * velocity * Swf * bwf * bwf * bwf * P * bwf / 2 / velocity * 0.045  ; 
				Mxx = M_aileron - M_RollingDrag  ;		
	
				phi = phi + P * dt ;
				dP_dt = Mxx / Ixx  ;
				P = P + dP_dt * dt; 				
			
				if ( phi >= phi2 ) 
				{
					
					//System.out.println("Phi2 reqd : " + phi2 ) ;
					//System.out.println("Moment generated by aileron : " + M_aileron) ; 
					//System.out.println("Moment generated by rolling drag : " + M_RollingDrag ) ;
					//System.out.println("Moment  : " + Mxx) ;
					//System.out.println("Vr : " + Vr ) ;
					//System.out.println("P : " + P ) ;
					//System.out.println ( "yd : " + yD ) ;
					System.out.println ("t2 : " + t ) ;
					System.out.println ("Phi2 : " +  ( phi * 57.3 )) ;
					return M_aileron ;
				}
			}
			
		} return -999 ;
	}
	public static void displayValues(double M_aileron) {
	    phi = 0;
	    P = 0;
	    dP_dt = 0;
	    Vr = 0;
	    D_Rolling = 0;
	    M_RollingDrag = 0;
	    Mxx = 0;

	    String outputPath = "C:\\Design Report\\Roll rate.csv"; // Replace with your desired path

	    try (PrintWriter writer = new PrintWriter(new FileWriter(outputPath))) {
	        // Write header
	        writer.println("Time,Phi,P");

	        for (double t = 0; t <= t2; t += dt) {
	            Vr = P * yD;
	            D_Rolling = 0.5 * density * Vr * Vr * (Swf + Sv + Sh) * CDr;
	            M_RollingDrag = 2 * 0.5 * density * velocity * velocity * Swf * bwf * bwf * bwf * P * bwf / 2 / velocity * 0.045;
	            Mxx = M_aileron - M_RollingDrag;

	            phi = phi + P * dt;
	            dP_dt = Mxx / Ixx;
	            P = P + dP_dt * dt;

	            // Write values to the CSV file
	            writer.println(t + "," + phi + "," + P);
	        }
	    } catch (IOException e) {
	        e.printStackTrace(); // Handle the exception appropriately
	    }
	}
}
		
		
	

